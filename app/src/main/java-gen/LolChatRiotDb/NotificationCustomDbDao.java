package LolChatRiotDb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import LolChatRiotDb.NotificationCustomDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTIFICATION_CUSTOM_DB.
*/
public class NotificationCustomDbDao extends AbstractDao<NotificationCustomDb, Long> {

    public static final String TABLENAME = "NOTIFICATION_CUSTOM_DB";

    /**
     * Properties of entity NotificationCustomDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserXmppId = new Property(1, String.class, "userXmppId", false, "USER_XMPP_ID");
        public final static Property TargetUserXmppId = new Property(2, String.class, "targetUserXmppId", false, "TARGET_USER_XMPP_ID");
        public final static Property NotificationId = new Property(3, Integer.class, "notificationId", false, "NOTIFICATION_ID");
        public final static Property State = new Property(4, Boolean.class, "state", false, "STATE");
    };


    public NotificationCustomDbDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationCustomDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTIFICATION_CUSTOM_DB' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_XMPP_ID' TEXT," + // 1: userXmppId
                "'TARGET_USER_XMPP_ID' TEXT," + // 2: targetUserXmppId
                "'NOTIFICATION_ID' INTEGER," + // 3: notificationId
                "'STATE' INTEGER);"); // 4: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTIFICATION_CUSTOM_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NotificationCustomDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userXmppId = entity.getUserXmppId();
        if (userXmppId != null) {
            stmt.bindString(2, userXmppId);
        }
 
        String targetUserXmppId = entity.getTargetUserXmppId();
        if (targetUserXmppId != null) {
            stmt.bindString(3, targetUserXmppId);
        }
 
        Integer notificationId = entity.getNotificationId();
        if (notificationId != null) {
            stmt.bindLong(4, notificationId);
        }
 
        Boolean state = entity.getState();
        if (state != null) {
            stmt.bindLong(5, state ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NotificationCustomDb readEntity(Cursor cursor, int offset) {
        NotificationCustomDb entity = new NotificationCustomDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userXmppId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetUserXmppId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // notificationId
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // state
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NotificationCustomDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserXmppId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetUserXmppId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNotificationId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setState(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NotificationCustomDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NotificationCustomDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
