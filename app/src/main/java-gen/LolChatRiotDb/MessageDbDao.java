package LolChatRiotDb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import LolChatRiotDb.MessageDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_DB.
*/
public class MessageDbDao extends AbstractDao<MessageDb, Long> {

    public static final String TABLENAME = "MESSAGE_DB";

    /**
     * Properties of entity MessageDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Message_riotXmppUser = new Property(1, String.class, "message_riotXmppUser", false, "MESSAGE_RIOT_XMPP_USER");
        public final static Property Message_from_or_to = new Property(2, Integer.class, "message_from_or_to", false, "MESSAGE_FROM_OR_TO");
        public final static Property Message_date = new Property(3, java.util.Date.class, "message_date", false, "MESSAGE_DATE");
        public final static Property Message_message = new Property(4, String.class, "message_message", false, "MESSAGE_MESSAGE");
        public final static Property Message_was_readed = new Property(5, Boolean.class, "message_was_readed", false, "MESSAGE_WAS_READED");
    };


    public MessageDbDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_DB' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MESSAGE_RIOT_XMPP_USER' TEXT," + // 1: message_riotXmppUser
                "'MESSAGE_FROM_OR_TO' INTEGER," + // 2: message_from_or_to
                "'MESSAGE_DATE' INTEGER," + // 3: message_date
                "'MESSAGE_MESSAGE' TEXT," + // 4: message_message
                "'MESSAGE_WAS_READED' INTEGER);"); // 5: message_was_readed
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_DB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String message_riotXmppUser = entity.getMessage_riotXmppUser();
        if (message_riotXmppUser != null) {
            stmt.bindString(2, message_riotXmppUser);
        }
 
        Integer message_from_or_to = entity.getMessage_from_or_to();
        if (message_from_or_to != null) {
            stmt.bindLong(3, message_from_or_to);
        }
 
        java.util.Date message_date = entity.getMessage_date();
        if (message_date != null) {
            stmt.bindLong(4, message_date.getTime());
        }
 
        String message_message = entity.getMessage_message();
        if (message_message != null) {
            stmt.bindString(5, message_message);
        }
 
        Boolean message_was_readed = entity.getMessage_was_readed();
        if (message_was_readed != null) {
            stmt.bindLong(6, message_was_readed ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageDb readEntity(Cursor cursor, int offset) {
        MessageDb entity = new MessageDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // message_riotXmppUser
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // message_from_or_to
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // message_date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // message_message
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // message_was_readed
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessage_riotXmppUser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessage_from_or_to(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setMessage_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setMessage_message(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage_was_readed(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
