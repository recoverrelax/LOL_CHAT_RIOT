package LolChatRiotDb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table IN_APP_LOG_DB.
 */
public class InAppLogDbDao extends AbstractDao<InAppLogDb, Long> {

    public static final String TABLENAME = "IN_APP_LOG_DB";

    public InAppLogDbDao(DaoConfig config) {
        super(config);
    }

    public InAppLogDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'IN_APP_LOG_DB' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LOG_ID' INTEGER," + // 1: logId
                "'LOG_DATE' INTEGER," + // 2: logDate
                "'LOG_MESSAGE' TEXT," + // 3: logMessage
                "'USER_XMPP_ID' TEXT," + // 4: userXmppId
                "'FRIEND_XMPP_ID' TEXT);"); // 5: friendXmppId
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IN_APP_LOG_DB'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, InAppLogDb entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer logId = entity.getLogId();
        if (logId != null) {
            stmt.bindLong(2, logId);
        }

        java.util.Date logDate = entity.getLogDate();
        if (logDate != null) {
            stmt.bindLong(3, logDate.getTime());
        }

        String logMessage = entity.getLogMessage();
        if (logMessage != null) {
            stmt.bindString(4, logMessage);
        }

        String userXmppId = entity.getUserXmppId();
        if (userXmppId != null) {
            stmt.bindString(5, userXmppId);
        }

        String friendXmppId = entity.getFriendXmppId();
        if (friendXmppId != null) {
            stmt.bindString(6, friendXmppId);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public InAppLogDb readEntity(Cursor cursor, int offset) {
        InAppLogDb entity = new InAppLogDb( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // logId
                cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // logDate
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logMessage
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userXmppId
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // friendXmppId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, InAppLogDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLogDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setLogMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserXmppId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFriendXmppId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(InAppLogDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(InAppLogDb entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity InAppLogDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LogId = new Property(1, Integer.class, "logId", false, "LOG_ID");
        public final static Property LogDate = new Property(2, java.util.Date.class, "logDate", false, "LOG_DATE");
        public final static Property LogMessage = new Property(3, String.class, "logMessage", false, "LOG_MESSAGE");
        public final static Property UserXmppId = new Property(4, String.class, "userXmppId", false, "USER_XMPP_ID");
        public final static Property FriendXmppId = new Property(5, String.class, "friendXmppId", false, "FRIEND_XMPP_ID");
    }

}
